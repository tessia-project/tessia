#!/usr/bin/env bash
# Copyright 2017 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

fqdn=${TESSIA_SERVER_FQDN:-server}

function _db_verify() {
    # wait for db to be available and handle initialization/schema migration
    # as needed.

    # when auto_mode is enabled db schema upgrades are done automatically
    local auto_mode=0
    if [ "${TESSIA_DB_AUTOMANAGE,,}" = "true" ]; then
        auto_mode=1
    fi

    local timeout=$(($(date +%s)+90))
    local output
    output=$(tess-dbmanage current 2>&1)
    local ret_code=$?
    echo "info: waiting for db connection to be available (timeout 90 secs)..."
    # exit code 3 from dbmanage means failed to connect to db so we wait
    # until the exit code is different or timeout is reached
    while [ $(date +%s) -lt $timeout ] && [ $ret_code -eq 3 ]; do
        sleep 5
        output=$(tess-dbmanage current 2>&1)
        ret_code=$?
    done

    # still getting code 3: timeout reached and db still not reachable
    if [ $ret_code -eq 3 ]; then
        echo "error: timed out while waiting for db connection"
        echo $output
        exit 1
    # exit code 2: db not initialized
    elif [ $ret_code -eq 2 ]; then
        # auto mode disabled: report error and abort
        if [ $auto_mode -eq 0 ]; then
            echo "error: db not initialized and automanage not set, aborting." >2
            exit 1
        fi
        # initialize db automatically
        local cmd='tess-dbmanage init'
        echo "info: db not initialized, initializing with '$cmd'"
        $cmd
        echo "info: db initialization done"
    # unknown error: report output from dbmanage and abort
    elif [ $ret_code -ne 0 ]; then
        echo $output
        exit 1
    # db initialized but schema is outdated (not at head): try auto schema upgrade
    elif echo $output | grep -qv '^.* (head)$'; then
        # auto mode disabled: report error and abort
        if [ $auto_mode -eq 0 ]; then
            echo "error: db schema version outdated and automanage not set, upgrade manually." >2
            exit 1
        fi
        # upgrade db schema automatically
        local cmd='tess-dbmanage upgrade head'
        echo "info: db schema outdated, upgrading with '$cmd'"
        $cmd
        echo "info: db schema upgrade done"
    else
        echo "info: db schema up-to-date, nothing to do"
    fi
}

function _ssl_config() {
    # verify if ssl certificate files are present and if not generate
    # a self-signed one

    # ssl files present: nothing to do
    if [ -f "/etc/tessia/ssl.crt" ] && [ -f "/etc/tessia/ssl.key" ]; then
        return
    fi
    echo "info: generating self-signed ssl certificate"

    local config="
[req]
prompt=no
distinguished_name=req_dn
[req_dn]
CN=${fqdn}
OU=TESSIA
[v3_ca]
subjectAltName=DNS:${fqdn}
"
    openssl req -new -nodes -x509 -newkey rsa:4098 -keyout /etc/tessia/ssl.key -out /etc/tessia/ssl.crt -days 3650 -reqexts v3_ca -extensions v3_ca -config <(printf "$config")

    # set appropriate permissions
    chown tessia. /etc/tessia/ssl.crt /etc/tessia/ssl.key
    chmod 600 /etc/tessia/ssl.crt /etc/tessia/ssl.key

    echo "info: ssl certificate created"
}

function _set_docker_perms() {
    # TODO
    # if /var/run/docker.sock exists;
    # get file's group  (usually 970 for docker)
    # if tessia's user not in this group: add it
    echo "TODO"
}

function _tweak_cfg() {
    # set the url where auto install machine stores the generated autofiles so
    # that the systems being installed can reach them
    yamlman update /etc/tessia/server.yaml auto_install.url http://${fqdn}/static

    # set db credentials if env variable was set
    if [ -n "$TESSIA_DB_URI" ]; then
        yamlman update /etc/tessia/server.yaml db.url "$TESSIA_DB_URI"
    fi

    # set live image password if env variable was set
    if [ -n "$TESSIA_LIVE_IMG_PASSWD" ]; then
        yamlman update /etc/tessia/server.yaml auto_install.live_img_passwd "$TESSIA_LIVE_IMG_PASSWD"
    fi
}

# instance specific settings to config file
_tweak_cfg

# db handling
_db_verify

# generate ssl cert if not available
_ssl_config

# start the api and scheduler via supervisor
echo "info: starting services..."
exec /usr/bin/supervisord
