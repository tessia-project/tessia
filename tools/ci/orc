#!/usr/bin/env python3
# Copyright 2017 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Script to orchestrate the executing of the tessia CI process
"""

#
# IMPORTS
#
from lib.manager import Manager
import logging
import os
import sys

try:
    import click
except ImportError:
    print('You need the click library installed to run this script',
          stderr=True)
    sys.exit(1)

#
# CONSTANTS AND DEFINITIONS
#
MY_DIR = os.path.dirname(os.path.abspath(__file__))
DOCKER_DIR = os.path.abspath('{}/docker'.format(MY_DIR))

#
# CODE
#
def _build_image_map():
    """
    Parse the set of images available for building.
    """
    image_map = {}

    for entry in os.listdir(DOCKER_DIR):
        # description not accessible: not a image dir
        try:
            with open('{}/{}/description'.format(
                DOCKER_DIR, entry)) as file_fd:
                desc = file_fd.read()
        except (IOError, FileNotFoundError):
            continue
        image_map[entry] = desc.strip()

    return image_map
# _build_image_map()

@click.command('build')
@click.option('config_url', '--configurl',
              help='url containing CI configuration')
@click.option('images', '--image', multiple=True,
              help='name of image to build (leave empty to build all)')
@click.option('prod_tag', '--prodtag',
              help='build in production mode for specified tag')
@click.option('no_clean', '--noclean', is_flag=True, default=False,
              help='do not clean up work dir (useful for debugging)')
@click.option('--verbose', is_flag=True, default=False,
              help='report all output from commands')
def build(config_url, images, prod_tag, no_clean, verbose):
    """
    build one or more images
    """
    # list of available images
    image_list = _build_image_map().keys()
    # list of images to build
    build_list = []
    # no image specified: build all
    if len(images) == 0:
        click.echo('No image specified: building all ({})'.format(
            ', '.join(images)))
        build_list = image_list
    # image specified: check if it exists
    else:
        for check_name in images:
            if check_name in image_list:
                build_list.append(check_name)
                continue
            raise click.ClickException(
                "invalid image name '{}'".format(check_name))

    manager = Manager(build_list, config_url, prod_tag, not no_clean, verbose)
    manager.run()
# build()

@click.command('list')
def list_():
    """
    list the available images
    """
    image_map = _build_image_map()
    click.echo('')
    click.echo('List of available images (Name - Description)')
    click.echo('')
    for name in image_map:
        click.echo('{} -> {}'.format(name, image_map[name]))
# list_()

@click.group()
def root():
    """
    Tessia CI Orchestrator
    """
    pass
# root()

def main():
    """
    Entry point, executes the root group.
    """
    logging.basicConfig(
        level=logging.DEBUG, format="%(levelname)s: %(message)s")
    root.add_command(build)
    root.add_command(list_)
    root()
# main()

if __name__ == '__main__':
    main()
