#cloud-config
autoinstall:
  version: 1
  refresh-installer:
    update: no
  reporting:
    remote:
      type: webhook
      endpoint: {{ config['webhook']['endpoint'] }}
      consumer_key: {{ config['webhook']['key'] }}
      consumer_secret: "hello"
      token_key: {{ config['webhook']['token'] }}
      token_secret: "world"
      level: DEBUG
  apt:
    # do not overwrite original list, only add to it
    preserve_sources_list: yes
{%- if config['repos'][1:] %}
    sources:
{%- for repo in config['repos'][1:] %}
      {{repo['name']}}.list:
        source: "deb {{repo['apt_url']}}"
{%- endfor %}
{%- endif %}

  packages:
    - python3

{%- macro mib_to_mb(size) -%}
{%- set size_mb = ((size * 1024 * 1024) / 1000 / 1000) | int -%}
{{- size_mb -}}
{%- endmacro -%}
{%- macro mib_to_bytes(size) -%}
{%- set size_bytes = (size * 1024 * 1024) | int -%}
{{- size_bytes -}}
{%- endmacro -%}

{%- macro add_netplan_eth_iface(iface) %}
{%-   if iface['type'] == 'OSA' %}
      {{ iface['systemd_osname'] }}:
{%-   elif iface['type'] != 'OSA' %}
      {{ iface['osname'] }}:
        set-name: {{iface['osname']}}
        match:
          macaddress: {{iface['mac_addr']}}
{%-   endif %}
        dhcp4: no
        dhcp6: no
        gateway4: {{ gw_iface['gateway'] }}
        addresses: [ {% if iface['ip'] and not iface['vlan'] %}"{{iface['ip']}}/{{iface['mask_bits']}}"{% endif %} ]
{%-   if iface['dns_1'] %}
        nameservers:
          addresses: [ "{{iface['dns_1']}}"{% if iface['dns_2'] %}, "{{iface['dns_2']}}"{% endif %} ]
{%-   endif %}
{%- endmacro -%}

{%- macro add_netplan_vlan_iface(iface) %}
      {{iface['osname']}}.{{iface['vlan']}}:
        id: {{iface['vlan']}}
        link: {{iface['osname']}}
        addresses: [ {% if iface['ip'] %}"{{iface['ip']}}/{{iface['mask_bits']}}"{% endif %} ]
{%- endmacro -%}

{# replace internal mirror entries by the external ports repository #}
{%- macro configure_repos() -%}
{%- set repo_mirror = config['repos'][0]['url'] -%}
{# make sure we don't cause a syntax error due to a double quote in the url #}
{%- set repo_mirror = repo_mirror | replace('"', '\"') %}
    - |
      curtin in-target -- python -c "fd = open('/etc/apt/sources.list');
      lines = fd.read();
      fd.close();
      repo_mirror = r'''{{repo_mirror}}''';
      repo_ports = 'http://ports.ubuntu.com/ubuntu-ports';
      lines = lines.replace(repo_mirror, repo_ports);
      fd = open('/etc/apt/sources.list', 'w');
      fd.write(lines);
      fd.close()"
{%- endmacro %}

{# Since only one disk and one network interface is supported during
installation we create these auxiliary variables #}
{%- set root_svol = config['root_disk'] %}
{%- set gw_iface = config['gw_iface'] %}
{%- set system_type = config['system_type'] %}
{%- set vlans = config['ifaces'] | selectattr('vlan') | list %}

  early-commands:
    - set -x
    {# set installer password #}
    - "sed -i -e 's#installer:[^:]*#installer:{{config['sha512installpwd']}}#' /etc/shadow"
    - sed -i -e '/^installer/ s#subiquity-shell#bash#' /etc/passwd
    - |
      echo > /var/local/watchdog.py \
      "#!/usr/bin/python3\n"\
      "import requests\n"\
      "import glob\n"\
      "import json\n"\
      "import os\n"\
      "import time\n"\
      "logpoint = '{{ config['webhook']['endpoint'] }}'\n"\
      "binpoint = logpoint.replace('/log/','/bin/')\n"\
      "auth = 'oauth_consumer_key={{config['webhook']['key']}},oauth_token={{ config['webhook']['token'] }}'\n"\
      "with open('/tmp/watchdog.start', 'wt') as f:\n"\
      "    f.write('{}'.format(time.time()))\n"\
      "while not [_ for _ in glob.glob('/var/crash/*.crash') if os.stat(_).st_size > 10000]:\n"\
      "    time.sleep(0.5)\n"\
      "with open('/tmp/watchdog.trigger', 'wt') as f:\n"\
      "    f.write('{}'.format(time.time()))\n"\
      "event = {'name': 'autoinstall.yaml', 'event_type': 'log_dump', 'origin': 'watchdog', \n"\
      "    'timestamp': time.time(), 'level': 'DEBUG', 'result': 'SUCCESS'}\n"\
      "files = {'autoinstall.yaml': '/autoinstall.yaml', 'curtin-error-logs.tar': '/var/log/curtin/curtin-error-logs.tar'}\n"\
      "while True:\n"\
      "    time.sleep(5.2)\n"\
      "    for name, path in files.items():\n"\
      "        event['name'] = name\n"\
      "        try:\n"\
      "            with open(path, 'rt') as f:\n"\
      "                contents = f.read()\n"\
      "            event['result'] = 'SUCCESS'\n"\
      "            requests.post(binpoint, files={name: contents}, headers={'Authorization': auth})\n"\
      "        except:\n"\
      "            event['result'] = 'FAIL'\n"\
      "        resp = requests.post(logpoint, json=event, headers={'Authorization': auth})\n"\
      "        if resp.status_code != 200:\n"\
      "            with open('/tmp/watchdog.stop', 'wt') as f:\n"\
      "                f.write('{}'.format(time.time()))\n"\
      "            exit(0)"\
      && chmod +x /var/local/watchdog.py && nohup /var/local/watchdog.py &

    {# enable used devices #}
{%- for svol in config['svols'] %}
  {%- if svol['type'] == 'DASD' %}
    - chzdev -e dasd {{svol['volume_id']}}
    {# delete partition information forcibly - and if dasd is not yet formatted, return 0 nevertheless #}
    - dd if=/dev/zero of=/dev/disk/by-path/ccw-0.0.{{svol['volume_id']}} bs=4k count=512 || date
  {%- elif svol['type'] == 'HPAV' %}
    - chzdev -e dasd {{svol['volume_id']}}
  {%- elif svol['type'] == 'FCP' %}
     {% for adapter in svol['specs']['adapters'] %}
    - chzdev -e zfcp {{adapter['devno']}}
     {%- endfor %}
  {%- endif %}
{%- endfor -%}
{%- for iface in config['ifaces'] %}
  {%- if iface['type'] == 'OSA' %}
    - chzdev -e qeth {{iface['attributes']['ccwgroup'].split(',')[0]}}
  {%- endif -%}
{%- endfor -%}
{%- if gw_iface['type'] == "OSA" and gw_iface['mac_addr'] %}
      {# s390-netdevice does not provide a way to set mac address in layer2 mode so
      we do it manually here #}
    - ip link set addr {{gw_iface['mac_addr']}} dev {{gw_iface['systemd_osname']}}
      {# in case server is in same subnet update its arp cache to avoid losing connectivity #}
    - ping -c1 -w 90 {{config['server_hostname']}}
{%- endif %}

  locale: en_US.UTF-8

  identity:
    username: {{config['credentials']['admin-user']}}
    hostname: {{config['hostname']}}
    password: {{config['sha512rootpwd']}}

  ssh:
    install-server: yes
    allow-pw: yes

{%- if config['credentials']['admin-user'] == 'root' %}
{# root user is normally passwordless and disabled; so if the user
  wants to be root, we need to set additional options #}
  user-data:
    disable_root: false
    chpasswd:
      list: |
        root:{{config['sha512rootpwd']}}
{%- endif %}
{%- if system_type != "KVM" %}
  storage:
    grub:
      install_devices:
        - volume-{{ root_svol['volume_id'] }}
    {# disable default file swap #}
    swap:
      size: 0
    config:
{%- for svol in config['svols'] if svol['type'] != 'HPAV' %}
{%- set volid = 'volume-' + svol['volume_id'] %}
{%-   if svol['type'] == "FCP" %}
      - id: {{ volid }}
        ptable: gpt
        type: disk
        serial: "{{svol['specs']['wwid']}}"
        wwn: "0x{{svol['specs']['wwid'][1:]}}"
        wipe: superblock-recursive
        preserve: {{not svol['part_table']['table']}}
{%-   elif svol['type'] == "DASD" %}
      - id: {{ volid }}-dasd
        type: dasd
        device_id: 0.0.{{svol['volume_id']}}
        blocksize: 4096
        disk_layout: cdl
        mode: full
      - id: {{ volid }}
        type: disk
        device_id: 0.0.{{svol['volume_id']}}
        ptable: vtoc
        wipe: superblock-recursive
        preserve: {{not svol['part_table']['table']}}
{%-   endif %}
{%-   for part in svol['part_table']['table'] %}
      - type: partition
        device: {{ volid }}
        id: {{ volid }}-part{{ loop.index }}
{%-     if svol['type'] == "FCP" %}
        {# safety margin of 1 MB for FCP devices #}
        size: {{ mib_to_bytes(part['size'] - 1) }}
{%-     else %}
        size: {{ mib_to_bytes(part['size']) }}
{%-     endif %}
        wipe: superblock
        preserve: false
        number: {{ loop.index }}
{%-     if part['fs'] == 'swap' %}
        flag: swap
{%-     endif %}
      - type: format
        volume: {{ volid }}-part{{ loop.index }}
        id: {{ volid }}-part{{ loop.index }}-fs
        fstype: {{ part['fs'] }}
{%-     if part['mp'] or part['fs'] == 'swap' %}
      - type: mount
        device: {{ volid }}-part{{ loop.index }}-fs
        id: {{ volid }}-part{{ loop.index }}-fs-mount
        path: {{ part['mp'] or none }}
{%-     endif %}
{%-   endfor %}{# part #}
{%- endfor %}{# svol in svols #}
{%- endif %}{# not KVM #}

{# Use networkd as default renderer, because MAC addresses and such #}
  network:
    version: 2
    ethernets:
{%- for iface in config['ifaces'] %}
{{   add_netplan_eth_iface(iface)}}
{%- endfor %}
{%- if vlans %}
    vlans:
{%-   for iface in vlans %}
{{   add_netplan_vlan_iface(iface)}}
{%-   endfor %}
{%- endif %}

  late-commands:
    - echo 'sclp_line0' >> /target/etc/securetty
    - "sed -i 's/^[# ]*PermitRootLogin .*/PermitRootLogin yes/g' /target/etc/ssh/sshd_config"
{%- if config["profile_parameters"]["linux-kargs-target"] %}
    - sed -i 's,parameters =\(.*\)$,parameters =\1 {{config["profile_parameters"]["linux-kargs-target"]}},g' /target/etc/zipl.conf
    - curtin in-target -- /sbin/zipl -V
{%- endif %}
    - |
      echo >> /target/etc/motd \
      "**************************************************************\n"\
      "*                                                            *\n"\
      "*                The system was installed using              *\n"\
      "*                           TESSIA                           *\n"\
      "* Task Execution Supporter and System Installation Assistant *\n"\
      "*                                                            *\n"\
      "* Open source repo: https://gitlab.com/tessia-project        *\n"\
      "* (GitHub mirror: https://github.com/tessia-project)         *\n"\
      "*                                                            *\n"\
      "* You can find documentation here:                           *\n"\
      "* https://gitlab.com/tessia-project/tessia/-/tree/master/doc *\n"\
      "*                                                            *\n"\
      "* To create custom templates for auto installation see:      *\n"\
      "* > tess autotemplate add --help                             *\n"\
      "*                                                            *\n"\
      "**************************************************************\n"
