variables:
  CLI_IMAGE_NAME: tessia-cli:${CI_COMMIT_REF_SLUG}
  SERVER_IMAGE_NAME: tessia-server:${CI_COMMIT_REF_SLUG}
  REGISTRY_CLI_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/tessia-cli:${CI_COMMIT_REF_SLUG}
  REGISTRY_SERVER_IMAGE_NAME: ${CI_REGISTRY_IMAGE}/tessia-server:${CI_COMMIT_REF_SLUG}

stages:
  - unit test
  - build
  - integration test
  - release

default:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - >-
        apk add --no-cache bash git python3 py3-pip
        build-base libffi-dev openssl-dev python3-dev cargo rust
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - pip3 install -U pip -rtools/ci/requirements.txt

build cli:
  stage: build
  needs: []
  script:
    - tools/ci/orc build --tag=$CI_COMMIT_REF_SLUG --image=tessia-cli
    - docker tag $CLI_IMAGE_NAME $REGISTRY_CLI_IMAGE_NAME
    - docker push $REGISTRY_CLI_IMAGE_NAME
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

build server:
  stage: build
  needs: []
  script:
    - tools/ci/orc build --tag=$CI_COMMIT_REF_SLUG --image=tessia-server
    - docker tag $SERVER_IMAGE_NAME $REGISTRY_SERVER_IMAGE_NAME
    - docker push $REGISTRY_SERVER_IMAGE_NAME
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

cli tests:
  stage: integration test
  needs: ['build server', 'build cli']
  script:
    - pip3 install docker-compose
    - docker pull $REGISTRY_SERVER_IMAGE_NAME
    - docker tag $REGISTRY_SERVER_IMAGE_NAME $SERVER_IMAGE_NAME
    - docker pull $REGISTRY_CLI_IMAGE_NAME
    - docker tag $REGISTRY_CLI_IMAGE_NAME $CLI_IMAGE_NAME
    - tools/ci/orc clitest --tag=$CI_COMMIT_REF_SLUG
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

unit server:
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  stage: unit test
  # override default image, services and before_script
  image: python:3.8
  variables:
    FF_NETWORK_PER_BUILD: 1
    TESSIA_DB_TEST_URI: "postgresql://tessia:unittest@db/tessia_test"
    TESSIA_MEDIATOR_URI: "redis://tessia:unittest@mediator:6379/0"
    POSTGRES_DB: "tessia_test"
    POSTGRES_USER: "tessia"
    POSTGRES_PASSWORD: "unittest"
    COVERAGE_FILE: ".tessia.server.coverage"
    TESSIA_CFG: ".tessia.cfg"
  # unit tests use real databases
  services:
    - name: postgres:13-alpine
      alias: db
    - name: redis:alpine
      alias: mediator
      entrypoint: [
        '/bin/sh', '-c',
        'echo "user tessia on +@all allkeys >unittest" > /etc/redis.conf; redis-server /etc/redis.conf'
      ]
  before_script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
  script:
    - pip3 install -r requirements.txt -r dev-requirements.txt
    - touch $TESSIA_CFG
    - tools/run_pylint.py
    - python3 -m coverage run --source=tessia/server -m unittest discover tests/unit -p '*.py'
    - python3 -m coverage run -a --source=tessia/server -m pytest -p no:cacheprovider tests_pytest
    - python3 -m coverage report -m

unit mesh:
  stage: unit test
  # override default image, services and before_script
  image: python:3.8
  services: []
  before_script:
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
  script:
    - pip3 install -r requirements.txt -r dev-requirements.txt
    - cd mesh_components
    - python3 -m pytest scheduler
    - python3 -m pytest permission_manager
    - python3 -m pytest control_node

release:
  stage: release
  script:
    - export TESSIA_IMAGE_TAG=`python3 -c 'from setup import gen_version; print(gen_version().replace("+", "-commit"))'`
    - docker pull $REGISTRY_CLI_IMAGE_NAME
    - docker pull $REGISTRY_SERVER_IMAGE_NAME
    - docker tag $REGISTRY_CLI_IMAGE_NAME ${CI_REGISTRY_IMAGE}/tessia-cli:${TESSIA_IMAGE_TAG}
    - docker tag $REGISTRY_SERVER_IMAGE_NAME ${CI_REGISTRY_IMAGE}/tessia-server:${TESSIA_IMAGE_TAG}
    - docker push ${CI_REGISTRY_IMAGE}/tessia-cli:${TESSIA_IMAGE_TAG}
    - docker push ${CI_REGISTRY_IMAGE}/tessia-server:${TESSIA_IMAGE_TAG}
  only:
    - master
    - tags
