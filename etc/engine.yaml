# tessia engine configuration file

# database configuration
db:
  # location of the database (in sqlalchemy format)
  url: postgresql://engine:engine@localhost/engine

auto_install:
  # the url must be accessible from the systems being installed
  url: http://localhost/static
  dir: var/tessia/www

# authentication subsystem
auth:
  realm: authentication realm
  # only ldap or free are supported at the moment
  login_method: ldap
  # whether to allow users to be automatically added to engine's database
  # when the login subsystem authenticates them
  allow_user_auto_create: false
  # ldap configuration
  ldap:
    host: _ldap_server
    port: 636
    ssl: true
    # username for connection with ldap server, comment out for anonymous connection
    #username: user
    # password for connection with ldap server
    #password: pwd
    # time to wait for ldap operations to complete
    #timeout: 10
    user_base: ou=people,o=company.com
    # this is combined with the login attribute to perform the ldap query
    user_filter: (objectclass=inetOrgPerson)
    user_attributes:
      # which attribute contains the user's full name, defaults to 'cn'
      fullname: cn
      # which attribute contains the user's login, defaults to 'mail'
      login: mail
      # optional - which attribute contains the user's job title,
      # uncomment or set to null if your ldap does not provide such info
      title: title
    # use group_filter to enable group based access, one or more groups can be specified following ldap filter syntax
    group_filter: (&(cn=tessia-users)(objectclass=groupOfUniqueNames))
    # if group_filter is specified a group_base is necessary
    group_base: ou=group,o=company.com
    # if group_filter is specified enter which attribute defines the user's membership in the group entry
    group_membership_attr: uniquemember

# logging configuration - usually it is not necessary to touch this section,
# but if you feel the need to do so logging is highly customizable as the engine
# uses a hierarchy of loggers according to python recommended usage.
log:
  version: 1
  disable_existing_loggers: false
  formatters:
    default:
      format: '%(asctime)s | %(levelname)s | %(message)s'
      datefmt: '%Y-%m-%d %H:%M:%S'
    debugger:
      format: '%(asctime)s|%(levelname)s|%(filename)s(%(lineno)s)|%(message)s'
  handlers:
    console:
      class: logging.StreamHandler
      formatter: default
      level: INFO
      stream: ext://sys.stderr
    file_api:
      class: tessia_engine.log.CreateDirRotatingFileHandler
      formatter: default
      level: INFO
      filename: log/tessia/api.log
      maxBytes: 70000000
      backupCount: 3
    file_common:
      class: tessia_engine.log.CreateDirRotatingFileHandler
      formatter: default
      level: INFO
      filename: log/tessia/common.log
      maxBytes: 70000000
      backupCount: 3
  loggers:
    # uncomment this logger if you need to debug db related issues
    #sqlalchemy:
    #  handlers: [console]
    #  level: DEBUG
    tessia_engine:
      handlers: [console, file_common]
      level: DEBUG
    tessia_engine.api:
      handlers: [console, file_api]
      level: DEBUG
      propagate: false
    # the scheduler runs as a standalone process therefore we don't
    # define a file based handler for it here.
    tessia_engine.scheduler:
      handlers: [console]
      level: DEBUG
      propagate: false
    # state machines are executed as jobs and have their own log file,
    # therefore we don't define a file based handler for them in this
    # configuration.
    tessia_engine.state_machines:
      handlers: [console]
      level: DEBUG
      propagate: false
    # tessia_baselib is used by the state machines in jobs so we don't
    # define a file based handler either.
    tessia_baselib:
      handlers: [console]
      level: DEBUG

scheduler:
  jobs_dir: var/tessia/jobs
