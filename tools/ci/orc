#!/usr/bin/env python3
# Copyright 2017 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Script to orchestrate the execution and testing of the tessia services
"""

#
# IMPORTS
#
from lib.manager import Manager
from lib.util import build_image_map
import logging
import sys

try:
    import click
except ImportError:
    print('You need the click library installed to run this script',
          stderr=True)
    sys.exit(1)

#
# CONSTANTS AND DEFINITIONS
#

#
# CODE
#
@click.command('all')
@click.option(
    'tag', '--tag',
    help="docker tag to use (if not specified uses project's versioning)")
@click.option(
    'field_tests', '--fieldtests',
    type=click.Path(exists=True, file_okay=False, resolve_path=True),
    help='dir path with custom field tests to execute')
@click.option(
    'img_passwd_file', '--img-passwd-file',
    type=click.Path(exists=True, dir_okay=False, resolve_path=True),
    help='path to file containing root password of auxiliar live-image')
@click.option('--registry', help='docker registry url to push image(s)')
@click.option(
    'install_server_hostname', '--install-server-hostname',
    help='custom hostname/ip to use as install server (when detected fqdn is '
         'not reachable by installed systems)')
@click.option('--quiet', is_flag=True, default=False,
              help='suppress output from commands')
@click.option(
    '--builder', default=None,
    help='optional fqdn for docker host, if it is on a different machine')
def all_(tag, field_tests, img_passwd_file, registry, install_server_hostname,
         quiet, builder):
    """
    execute all ci stages in one run
    """
    manager = Manager(
        'all', tag, registry_url=registry, field_tests=field_tests,
        img_passwd_file=img_passwd_file,
        install_server_hostname=install_server_hostname, verbose=not quiet,
        builder_hostname=builder)
    manager.run()
# all_()

@click.command('build')
@click.option('images', '--image', multiple=True,
              help='name of image to build (if not specified build all)')
@click.option(
    'tag', '--tag',
    help="docker tag to use (if not specified uses project's versioning)")
@click.option('--quiet', is_flag=True, default=False,
              help='suppress output from commands')
def build(images, tag, quiet):
    """
    build one or more images
    """
    # images to build
    build_images = None

    # list of available images
    image_list = build_image_map().keys()

    # image specified: check if it exists
    if images:
        build_images = []
        for check_name in images:
            if check_name in image_list:
                build_images.append(check_name)
                continue
            raise click.ClickException(
                "invalid image name '{}'".format(check_name))
        click.echo('building images {}'.format(', '.join(build_images)))
    # no image specified: build all
    else:
        click.echo('building images {}'.format(', '.join(image_list)))

    manager = Manager('build', tag, images=build_images, verbose=not quiet)
    manager.run()
# build()

@click.command('cleanup')
@click.option('tag', '--tag', help='docker tag to locate images/containers')
@click.option('--keepimg', is_flag=True, default=False,
              help='do not delete images')
@click.option(
    '--builder', default=None,
    help='optional fqdn for docker host, if it is on a different machine')
def cleanup(tag, keepimg, builder):
    """
    execute the cleanup stage
    """
    manager = Manager('cleanup', tag, keepimg=keepimg,
                      builder_hostname=builder)
    manager.run()
# cleanup()

@click.command('clitest')
@click.option('tag', '--tag', help='docker tag to locate images')
@click.option(
    'field_tests', '--fieldtests',
    type=click.Path(exists=True, file_okay=False, resolve_path=True),
    help='dir path with custom field tests to execute')
@click.option(
    'img_passwd_file', '--img-passwd-file',
    type=click.Path(exists=True, dir_okay=False, resolve_path=True),
    help='path to file containing root password of auxiliar live-image')
@click.option(
    'install_server_hostname', '--install-server-hostname',
    help='custom hostname/ip to use as install server (when detected fqdn is '
         'not reachable by installed systems)')
@click.option(
    'custom_cli_subnet', '--custom-cli-subnet',
    help='custom subnet for network between cli and server docker container'
         ' e.g. 172.28.0.0/16')
@click.option(
    'custom_db_subnet', '--custom-db-subnet',
    help='custom subnet for network between server and db docker container'
         ' e.g. 172.29.0.0/16')
@click.option(
    '--builder', default=None,
    help='optional fqdn for docker host, if it is on a different machine')
def clitest(tag, field_tests, img_passwd_file, install_server_hostname,
            custom_cli_subnet, custom_db_subnet, builder):
    """
    execute the client integration tests
    """
    manager = Manager(
        'clitest', tag, field_tests=field_tests,
        img_passwd_file=img_passwd_file,
        install_server_hostname=install_server_hostname,
        custom_cli_subnet=custom_cli_subnet, custom_db_subnet=custom_db_subnet,
        builder_hostname=builder)
    manager.run()
# clitest()

@click.command('run', help='start services via docker-compose')
@click.option('tag', '--tag', help='docker tag to locate images')
@click.option('devmode', '--devmode', is_flag=True, default=False,
              help='bind mount source files inside containers')
@click.option(
    'img_passwd_file', '--img-passwd-file',
    type=click.Path(exists=True, dir_okay=False, resolve_path=True),
    help='path to file containing root password of auxiliar live-image')
@click.option(
    'install_server_hostname', '--install-server-hostname',
    help='custom hostname/ip to use as install server (when detected fqdn is '
         'not reachable by installable systems)')
@click.option(
    'custom_cli_subnet', '--custom-cli-subnet',
    help='custom subnet for network between cli and server docker container'
         ' e.g. 172.28.0.0/16')
@click.option(
    'custom_db_subnet', '--custom-db-subnet',
    help='custom subnet for network between server and db docker container'
         ' e.g. 172.29.0.0/16')
@click.option('clitests', '--clitests', is_flag=True, default=False,
              help='execute all client tests')
@click.option(
    '--builder', default=None,
    help='optional fqdn for docker host, if it is on a different machine')
def run(tag, devmode, img_passwd_file, install_server_hostname,
        custom_cli_subnet, custom_db_subnet, clitests, builder):
    """
    start and keep services running until manually stopped
    """
    manager = Manager(
        'run', tag, devmode=devmode, img_passwd_file=img_passwd_file,
        install_server_hostname=install_server_hostname,
        custom_cli_subnet=custom_cli_subnet, custom_db_subnet=custom_db_subnet,
        clitests=clitests, builder_hostname=builder)
    manager.run()
# run()

@click.command('list-images')
def list_images():
    """
    list the docker images available for build
    """
    image_map = build_image_map()
    click.echo('')
    click.echo('List of available images (Name - Description)')
    click.echo('')
    for name in image_map:
        click.echo('{} -> {}'.format(name, image_map[name]))
# list_images()

@click.command('list-stages')
def list_stages():
    """
    list the available ci stages for execution
    """
    for name in Manager.STAGES:
        click.echo('{}'.format(name))
# list_stages()

@click.command('push')
@click.option('--registry', required=True,
              help='docker registry url to push images')
@click.option('images', '--image', multiple=True,
              help='name of image to push (if not specified pushes all)')
@click.option('tag', '--tag', help='docker tag to locate images')
def push(images, tag, registry):
    """
    push images to a docker registry
    """
    manager = Manager('push', tag, images=images, registry_url=registry)
    manager.run()
# push()

@click.command('unittest')
@click.option('tag', '--tag', help='docker tag to locate images')
@click.option('--path', default=None, help='optional path to unit test')
@click.option(
    'custom_cli_subnet', '--custom-cli-subnet',
    help='custom subnet for network between cli and server docker container'
         ' e.g. 172.28.0.0/16')
@click.option(
    'custom_db_subnet', '--custom-db-subnet',
    help='custom subnet for network between server and db docker container'
         ' e.g. 172.29.0.0/16')
@click.option(
    '--builder', default=None,
    help='optional fqdn for docker host, if it is on a different machine')
def unittest(tag, path, custom_cli_subnet, custom_db_subnet, builder):
    """
    execute unit test on docker images
    """
    manager = Manager(
        'unittest', tag, images=['server'],
        custom_cli_subnet=custom_cli_subnet, custom_db_subnet=custom_db_subnet,
        unittest_path=path, builder_hostname=builder)
    manager.run()
# unittest()

@click.group()
def root():
    """
    Tessia CI Orchestrator
    """
    pass
# root()

def main():
    """
    Entry point, executes the root group.
    """
    logging.basicConfig(
        level=logging.DEBUG, format="%(levelname)s: %(message)s")
    root.add_command(all_)
    root.add_command(build)
    root.add_command(cleanup)
    root.add_command(clitest)
    root.add_command(run)
    root.add_command(push)
    root.add_command(unittest)
    root.add_command(list_images)
    root.add_command(list_stages)
    root()
# main()

if __name__ == '__main__':
    main()
