{%- macro list_devs_with_ptable(vols) -%}
{% set dev_list = [] -%}
{% for vol in vols -%}
  {%- if vol["part_table"] -%}
    {% set _ = dev_list.append(vol["system_attributes"]["device"].replace('/dev/', '')) -%}
  {% endif -%}
{% endfor -%}
{{ dev_list | join(',') }}
{% endmacro -%}

{%- macro list_real_devs(vols) -%}
{% set dev_list = [] -%}
{% for vol in vols -%}
  {%- if vol["type"] != "HPAV" -%}
    {% set _ = dev_list.append(vol["system_attributes"]["device"].replace('/dev/', '')) -%}
  {% endif -%}
{% endfor -%}
{{ dev_list | join(',') }}
{% endmacro -%}

# System authorization information
auth --enableshadow --passalgo=sha512
sshpw --username=root {{config["sha512rootpwd"]}} --iscrypted
# Use network installation
url --url="{{config["repos"][0]['url']}}"
# Use graphical install
graphical
vnc --password={{config["credentials"]["vnc-password"]}}
# Run the Setup Agent on first boot
firstboot --enable

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information
{% for iface in config["ifaces"] %}
network --bootproto=static --device={{iface["osname"] if iface["type"] != "OSA" else iface["systemd_osname"]}} {% if iface['ip'] %}{% if iface['ip_type'] == 'ipv6' %}--ipv6={{iface['ip']}}/{{iface['mask_bits']}}{% else %}--ip={{iface["ip"]}} --netmask={{iface["mask"]}}{% endif %}{% endif %} --activate {% if iface["is_gateway"] %}{{'--ipv6gateway=' if iface['ip_type'] == 'ipv6' else '--gateway='}}{{iface['gateway']}}{% endif %} {% if iface["dns_1"] %}--nameserver={{iface["dns_1"]}}{% endif %} {% if iface["dns_2"] %}--nameserver={{iface["dns_2"]}}{% endif %} {% if iface["vlan"] %}--vlanid={{iface["vlan"]}} --interfacename={{iface["osname"]}}.{{iface["vlan"]}}{% endif %}
{% endfor %}
network --hostname={{config["hostname"]}}

# Root password
rootpw --iscrypted {{config["sha512rootpwd"]}}
# System timezone
timezone Europe/Berlin

# Activate fcp paths before partitioning section
{% if config["system_type"] != "KVM" %}
{% for volume in config["svols"] %}
{% if volume['type'] == 'FCP' -%}
{% for adapter in volume['specs']['adapters'] -%}
{% for wwpn in adapter['wwpns'] -%}
zfcp --devnum={{adapter['devno'].replace('0.0.', '')}} --wwpn={{wwpn}} --fcplun={{volume['volume_id']}}
{% endfor -%}
{% endfor -%}
{% endif -%}
{% endfor -%}
{% endif -%}

# Partition clearing information
ignoredisk --only-use={{list_real_devs(config["svols"])}}
clearpart --initlabel --all --drives={{list_devs_with_ptable(config["svols"])}}
{% for volume in config["svols"] %}
{% if volume["is_root"] %}
# System bootloader configuration
{% if config["profile_parameters"] -%}
bootloader --append="{{(config["profile_parameters"]["linux-kargs-target"] | default("")).replace('"', '\\"')}}" --location=mbr --boot-drive={{volume["system_attributes"]["device"].replace('/dev/', '')}}
{%- else -%}
bootloader --location=mbr --boot-drive={{volume["system_attributes"]["device"].replace('/dev/', '')}}
{%- endif -%}
{% endif %}
# Disk partitioning information
{% for entry in volume["part_table"]["table"] %}
part {% if entry["fs"] == "swap" %}swap{% else %}{{entry["mp"]}}{% endif %} --fstype="{{entry["fs"]}}" --ondisk={{volume["system_attributes"]["device"]}} --size={{entry["size"]}} {% if entry.get("mo") %} --fsoptions="{{entry["mo"]}}" {% endif %}
{% endfor %}
{% endfor %}
%packages
@^minimal-environment
@core
@virtualization
device-mapper-multipath
lsscsi
kexec-tools
python
%end

%addon com_redhat_kdump --enable

%end

%post
#!/bin/bash
# network configuration adjustments
{% for iface in config["ifaces"] -%}
  {% if iface["systemd_osname"] and iface["osname"] != iface["systemd_osname"] -%}
sed -i s/DEVICE=.*/DEVICE={{iface["osname"]}}/ /etc/sysconfig/network-scripts/ifcfg-{{iface["systemd_osname"]}}
mv /etc/sysconfig/network-scripts/ifcfg-{{iface["systemd_osname"]}} /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}
    {% if iface["vlan"] -%}
sed -i s/PHYSDEV=.*/PHYSDEV={{iface["osname"]}}/ /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}.{{iface["vlan"]}}
      {% if iface["type"] == "OSA" -%}
# anaconda fails to add these entries to the physical device config file, this is a bug to be reported
sed -n -e '/^OPTIONS=/ p' -e '/^SUBCHANNELS/ p' -e '/^NETTYPE/ p' /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}.{{iface["vlan"]}} >> /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}
      {% endif -%}
    {% endif -%}
  {% endif -%}
  {% if iface["vlan"] -%}
# NetworkManager does not recognize "yes" (with quotes) generated by anaconda, this is a bug to be reported
sed -i s/VLAN=.*/VLAN=yes/ /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}.{{iface["vlan"]}}
  {% endif -%}
  {% if iface["mac_addr"] and iface["type"] == "OSA" -%}
echo "MACADDR={{iface["mac_addr"]}}" >> /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}
    {% if iface["vlan"] -%}
# adjustments to prevent NetworkManager from changing interface's mac address while trying to establish a connection
sed -i s/ONBOOT=.*/ONBOOT=yes/ /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}
sed -i s/BOOTPROTO=.*/BOOTPROTO=none/ /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}
sed -i s/IPV6_AUTOCONF=.*/IPV6_AUTOCONF=no/ /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}
    {% endif -%}
  {% endif -%}
  {% if iface["search_list"] -%}
echo 'DOMAIN="{{iface["search_list"]}}"' >> /etc/sysconfig/network-scripts/ifcfg-{{iface["osname"]}}
  {% endif -%}
{% endfor -%}
%end

{% if config["system_type"] != "KVM" -%}
%pre
#!/bin/bash
# disk configuration adjustments
  {% for volume in config["svols"] -%}
    {%- if volume['type'] == 'DASD' -%}
chzdev -e dasd {{volume['volume_id']}}
      {% if volume["part_table"] -%}
grep -q 'unformatted' /sys/bus/ccw/devices/0.0.{{volume['volume_id']}}/status && \
/sbin/dasdfmt -y -d cdl -b 4096 {{volume["system_attributes"]["device"]}}
      {% endif -%}
    {% elif volume['type'] == 'FCP' -%}
      {% for adapter in volume['specs']['adapters'] -%}
chzdev -e {{adapter['devno']}}
        {% for wwpn in adapter['wwpns'] -%}
chzdev -e zfcp-lun {{adapter['devno']}}:0x{{wwpn}}:0x{{volume['volume_id']}}
        {% endfor -%}
      {% endfor -%}
    {% elif volume['type'] == 'HPAV' -%}
chzdev -e dasd {{volume['volume_id']}}
    {% endif -%}
  {% endfor -%}
%end
{% endif -%}

#!/bin/bash
echo 'PERMITROOTLOGIN="-oPermitRootLogin=yes"' > /etc/sysconfig/sshd-permitrootlogin
%end

%post
#!/bin/bash
# repositories configuration adjustments
{% for repo in config["repos"] %}
cat <<EOF > /etc/yum.repos.d/{{repo['name']}}.repo
[{{repo['name']}}]
name={{repo['desc']}}
baseurl={{repo['url']}}
enabled=1
gpgcheck=0
skip_if_unavailable=False
EOF
{% endfor %}

# fcp configuration adjustments
{% if config["system_type"] != "KVM" %}
{% for volume in config["svols"] %}
{% if volume['type'] == 'FCP' -%}
{% for adapter in volume['specs']['adapters'] -%}
chzdev -e {{adapter['devno']}} -y
{% for wwpn in adapter['wwpns'] -%}
chzdev -e zfcp-lun {{adapter['devno']}}:0x{{wwpn}}:0x{{volume['volume_id']}} -y
{% endfor -%}
{% endfor -%}
{% endif -%}
{% endfor -%}
{% endif -%}

# kvmhost configuration adjustments
echo kvm > /etc/modules-load.d/kvm.conf
ln -s /usr/bin/qemu-system-s390x /usr/bin/qemu-kvm

echo -e >> /etc/motd \
"**************************************************************\n"\
"*                                                            *\n"\
"*                The system was installed using              *\n"\
"*                           TESSIA                           *\n"\
"* Task Execution Supporter and System Installation Assistant *\n"\
"*                                                            *\n"\
"* Open source repo: https://gitlab.com/tessia-project        *\n"\
"* (GitHub mirror: https://github.com/tessia-project)         *\n"\
"*                                                            *\n"\
"* A documentation is located here:                           *\n"\
"* https://gitlab.com/tessia-project/tessia/-/tree/master/doc *\n"\
"*                                                            *\n"\
"* To create custom templates for auto installation see:      *\n"\
"* > tess autotemplate add --help                             *\n"\
"*                                                            *\n"\
"**************************************************************\n"

%end
