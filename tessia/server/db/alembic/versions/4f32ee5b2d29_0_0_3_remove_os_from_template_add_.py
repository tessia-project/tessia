# Copyright 2018 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=all
"""0.0.3 remove os from template, add template to operating_systems

Revision ID: 4f32ee5b2d29
Revises: 14e7934c17c8
Create Date: 2018-03-15 13:39:57.863743

"""

# revision identifiers, used by Alembic.
revision = '4f32ee5b2d29'
down_revision = '14e7934c17c8'
branch_labels = None
depends_on = None

from alembic import op
from sqlalchemy import Column
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.schema import ForeignKey
from sqlalchemy.types import Boolean, Integer, LargeBinary, String

import os
import sqlalchemy as sa

SESSION = sessionmaker()
BASE = declarative_base()

# declare the models used in this migration
class CommonMixin(object):
    """
    Helper mixin to set attributes common to most classes
    """

    id = Column(Integer, primary_key=True)
# CommonMixin

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('operating_systems', sa.Column('template_id', sa.Integer(), nullable=True))
    op.create_foreign_key(op.f('fk_operating_systems_template_id_templates'), 'operating_systems', 'templates', ['template_id'], ['id'])
    op.drop_column('operating_systems', 'cmdline')
    op.alter_column('operating_systems', 'desc', new_column_name='pretty_name')
    op.alter_column('templates', 'content',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index('ix_templates_operating_system_id', table_name='templates')
    op.drop_constraint('fk_templates_operating_system_id_operating_systems', 'templates', type_='foreignkey')
    op.drop_column('templates', 'operating_system_id')
    # ### end Alembic commands ###

    class OperatingSystem(CommonMixin, BASE):
        """A supported operating system"""

        __tablename__ = 'operating_systems'

        name = Column(String, unique=True, index=True)
        type = Column(String, nullable=False)
        major = Column(Integer, nullable=False)
        minor = Column(Integer, nullable=False)
        pretty_name = Column(String, nullable=False)

        # default auto install template
        template_id = Column(Integer, ForeignKey('templates.id'))
    # OperatingSystem

    class Template(CommonMixin, BASE):
        """A template for a InstallMachine"""
        __tablename__ = "templates"

        name = Column(String, unique=True, nullable=False)
        content = Column(String, nullable=False)
        desc = Column(String)
    # Template

    # data migration
    session = SESSION(bind=op.get_bind())
    # update templates to new names and descriptions
    templates_dir = os.path.abspath(os.path.dirname(os.path.abspath(__file__)) + "/../../templates/")
    update_templates = {
        'RHEL7.2': (
            'rhel7-default', 'Default template for RHEL7 installations'),
        'SLES12.1': (
            'sles12-default', 'Default template for SLES12 installations'),
        'UBUNTU16.04.1': (
            'ubuntu16-default', 'Default template for Ubuntu16 installations'),
    }
    for key, value in update_templates.items():
        temp_obj = session.query(Template).filter_by(name=key).one()
        temp_obj.name = value[0]
        temp_obj.desc = value[1]
        template_path = '{}.jinja'.format(value[0])
        with open(templates_dir + '/' + template_path, "r") as template_file:
            temp_obj.content = template_file.read()

    # update existing oses to new type, pretty name, template
    update_oses = {
        'rhel7.2': ('redhat', 'Red Hat Enterprise Linux Server 7.2 (Maipo)', 'rhel7-default'),
        'sles12.1': ('suse', 'SUSE Linux Enterprise Server 12 SP1', 'sles12-default'),
        'ubuntu16.04.1': ('debian', 'Ubuntu 16.04.1 LTS', 'ubuntu16-default'),
    }
    for key, value in update_oses.items():
        temp_obj = session.query(Template).filter_by(name=value[2]).one()
        os_obj = session.query(OperatingSystem).filter_by(name=key).one()
        os_obj.type = value[0]
        if key == 'ubuntu16.04.1':
            os_obj.major = 1604
            os_obj.minor = 1
        os_obj.pretty_name = value[1]
        os_obj.template_id = temp_obj.id

    # insert new oses
    new_oses = [
        'cms,cms,0,0,z/VM Conversational Monitor System (CMS),,',
        'rhel7.3,redhat,7,3,Red Hat Enterprise Linux Server 7.3 (Maipo),rhel7-default',
        'rhel7.4,redhat,7,4,Red Hat Enterprise Linux Server 7.4 (Maipo),rhel7-default',
        'sles12.2,suse,12,2,SUSE Linux Enterprise Server 12 SP2,sles12-default',
        'sles12.3,suse,12,3,SUSE Linux Enterprise Server 12 SP3,sles12-default',
        'ubuntu16.04.2,debian,1604,2,Ubuntu 16.04.2 LTS,ubuntu16-default',
        'ubuntu16.04.3,debian,1604,3,Ubuntu 16.04.3 LTS,ubuntu16-default',
    ]
    for row in new_oses:
        row = row.split(',', 6)
        if row[0] == 'cms':
            template = None
        else:
            temp_obj = session.query(Template).filter_by(name=row[5]).one()
            template = temp_obj.id
        os_obj = session.query(OperatingSystem).filter_by(name=row[0]).one_or_none()
        if not os_obj:
            os_obj = OperatingSystem()
        os_obj.name = row[0],
        os_obj.type = row[1]
        os_obj.major = row[2]
        os_obj.minor = row[3]
        os_obj.pretty_name = row[4]
        os_obj.template_id = template
        session.add(os_obj)

    session.commit()
# upgrade

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('templates', sa.Column('operating_system_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_foreign_key('fk_templates_operating_system_id_operating_systems', 'templates', 'operating_systems', ['operating_system_id'], ['id'])
    op.create_index('ix_templates_operating_system_id', 'templates', ['operating_system_id'], unique=False)
    op.alter_column('templates', 'content',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('operating_systems', 'pretty_name', new_column_name='desc')
    op.add_column('operating_systems', sa.Column('cmdline', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_operating_systems_template_id_templates'), 'operating_systems', type_='foreignkey')
    op.drop_column('operating_systems', 'template_id')
    # ### end Alembic commands ###

    class OldOperatingSystem(CommonMixin, BASE):
        """Downgrade version of operating system"""

        __tablename__ = 'operating_systems'

        name = Column(String, unique=True, index=True)
        type = Column(String, nullable=False)
        major = Column(Integer, nullable=False)
        minor = Column(Integer, nullable=False)
        desc = Column(String, nullable=False)
        cmdline = Column(String)

    # OldOperatingSystem

    class OldTemplate(CommonMixin, BASE):
        """The downgrade version of template"""
        __tablename__ = "templates"

        name = Column(String, unique=True, nullable=False)
        content = Column(String, nullable=False)
        desc = Column(String)
        operating_system_id = Column(
            Integer, ForeignKey('operating_systems.id'), index=True)

    # OldTemplate

    # data revert
    session = SESSION(bind=op.get_bind())
    # set templates to old name and description
    update_templates = {
        'rhel7-default': ('RHEL7.2', 'Template for RHEL7.2', 'rhel7.2'),
        'sles12-default': ('SLES12.1', 'Template for SLES12.1', 'sles12.1'),
        'ubuntu16-default': ('UBUNTU16.04.1', 'Template for Ubuntu 16.04.1', 'ubuntu16.04.1'),
    }
    for key, value in update_templates.items():
        os_obj = session.query(OldOperatingSystem).filter_by(name=value[2]).one()
        temp_obj = session.query(OldTemplate).filter_by(name=key).one()
        temp_obj.name = value[0]
        temp_obj.desc = value[1]
        temp_obj.operating_system_id = os_obj.id

    # set oses back to old type and description
    templates_dir = os.path.abspath(
            os.path.dirname(os.path.abspath(__file__)) +
            "/../../../state_machines/autoinstall/templates")
    update_oses = {
        'rhel7.2': ('rhel', 'RHEL 7.2 GA', 'rhel7-default'),
        'sles12.1': ('sles', 'SLES 12.1', 'sles12-default'),
        'ubuntu16.04.1': ('ubuntu', 'Ubuntu 16.04.1', 'ubuntu16-default'),
    }
    for key, value in update_oses.items():
        os_obj = session.query(OldOperatingSystem).filter_by(name=key).one()
        new_type = os_obj.type
        os_obj.type = value[0]
        if key == 'ubuntu16.04.1':
            os_obj.major = 16
            os_obj.minor = 4
        os_obj.desc = value[1]
        cmdline_template_path = '{}.cmdline.jinja'.format(new_type)
        with open(templates_dir + '/' + cmdline_template_path, "r") as cmdline_file:
            os_obj.cmdline = cmdline_file.read()

    session.commit()
# downgrade
