# Copyright 2016, 2017 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# pylint: disable=all
"""0.0.1 (initial model)

Revision ID: 5959912cd07d
Revises: 
Create Date: 2016-10-18 09:47:21.845948

"""

# revision identifiers, used by Alembic.
revision = '5959912cd07d'
down_revision = None
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('iface_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_iface_types')),
    sa.UniqueConstraint('name', name=op.f('uq_iface_types_name'))
    )
    op.create_table('operating_systems',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('major', sa.String(), nullable=False),
    sa.Column('minor', sa.String(), nullable=True),
    sa.Column('desc', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_operating_systems')),
    sa.UniqueConstraint('name', name=op.f('uq_operating_systems_name'))
    )
    op.create_table('projects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.Column('avatar', sa.LargeBinary(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_projects')),
    sa.UniqueConstraint('name', name=op.f('uq_projects_name'))
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('name', name=op.f('uq_roles_name'))
    )
    op.create_table('storage_pool_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storage_pool_types')),
    sa.UniqueConstraint('name', name=op.f('uq_storage_pool_types_name'))
    )
    op.create_table('storage_server_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storage_server_types')),
    sa.UniqueConstraint('name', name=op.f('uq_storage_server_types_name'))
    )
    op.create_table('system_archs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_system_archs')),
    sa.UniqueConstraint('name', name=op.f('uq_system_archs_name'))
    )
    op.create_table('system_states',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_system_states')),
    sa.UniqueConstraint('name', name=op.f('uq_system_states_name'))
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('login', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('restricted', sa.Boolean(), nullable=False),
    sa.Column('admin', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('login', name=op.f('uq_users_login'))
    )
    op.create_table('volume_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_volume_types')),
    sa.UniqueConstraint('name', name=op.f('uq_volume_types_name'))
    )
    op.create_table('net_zones',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('modifier_id', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['modifier_id'], ['users.id'], name=op.f('fk_net_zones_modifier_id_users')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_net_zones_owner_id_users')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_net_zones_project_id_projects')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_net_zones')),
    sa.UniqueConstraint('name', name=op.f('uq_net_zones_name'))
    )
    op.create_index(op.f('ix_net_zones_modifier_id'), 'net_zones', ['modifier_id'], unique=False)
    op.create_index(op.f('ix_net_zones_owner_id'), 'net_zones', ['owner_id'], unique=False)
    op.create_index(op.f('ix_net_zones_project_id'), 'net_zones', ['project_id'], unique=False)
    op.create_table('role_actions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('resource', sa.String(), nullable=False),
    sa.Column('action', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_role_actions_role_id_roles')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_role_actions')),
    sa.UniqueConstraint('role_id', 'resource', 'action', name=op.f('uq_role_actions_role_id_resource_action'))
    )
    op.create_index(op.f('ix_role_actions_role_id'), 'role_actions', ['role_id'], unique=False)
    op.create_table('storage_servers',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('hostname', sa.String(), nullable=True),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('fw_level', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('attributes', postgresql.JSONB(), nullable=True),
    sa.Column('modifier_id', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['modifier_id'], ['users.id'], name=op.f('fk_storage_servers_modifier_id_users')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_storage_servers_owner_id_users')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_storage_servers_project_id_projects')),
    sa.ForeignKeyConstraint(['type_id'], ['storage_server_types.id'], name=op.f('fk_storage_servers_type_id_storage_server_types')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storage_servers')),
    sa.UniqueConstraint('name', name=op.f('uq_storage_servers_name'))
    )
    op.create_index(op.f('ix_storage_servers_modifier_id'), 'storage_servers', ['modifier_id'], unique=False)
    op.create_index(op.f('ix_storage_servers_owner_id'), 'storage_servers', ['owner_id'], unique=False)
    op.create_index(op.f('ix_storage_servers_project_id'), 'storage_servers', ['project_id'], unique=False)
    op.create_table('system_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('arch_id', sa.Integer(), nullable=False),
    sa.Column('model', sa.String(), nullable=False),
    sa.Column('submodel', sa.String(), nullable=True),
    sa.Column('desc', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['arch_id'], ['system_archs.id'], name=op.f('fk_system_models_arch_id_system_archs')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_system_models')),
    sa.UniqueConstraint('name', name=op.f('uq_system_models_name'))
    )
    op.create_index(op.f('ix_system_models_arch_id'), 'system_models', ['arch_id'], unique=False)
    op.create_table('system_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('arch_id', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['arch_id'], ['system_archs.id'], name=op.f('fk_system_types_arch_id_system_archs')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_system_types')),
    sa.UniqueConstraint('name', name=op.f('uq_system_types_name'))
    )
    op.create_index(op.f('ix_system_types_arch_id'), 'system_types', ['arch_id'], unique=False)
    op.create_table('user_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('key_id', sa.String(), nullable=False),
    sa.Column('key_secret', sa.String(), nullable=False),
    sa.Column('created', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_used', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_keys_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_keys')),
    sa.UniqueConstraint('user_id', 'key_id', name=op.f('uq_user_keys_user_id_key_id'))
    )
    op.create_index(op.f('ix_user_keys_key_id'), 'user_keys', ['key_id'], unique=False)
    op.create_index(op.f('ix_user_keys_user_id'), 'user_keys', ['user_id'], unique=False)
    op.create_table('user_roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_user_roles_project_id_projects')),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], name=op.f('fk_user_roles_role_id_roles')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_user_roles_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_roles')),
    sa.UniqueConstraint('user_id', 'role_id', 'project_id', name=op.f('uq_user_roles_user_id_role_id_project_id'))
    )
    op.create_index(op.f('ix_user_roles_project_id'), 'user_roles', ['project_id'], unique=False)
    op.create_index(op.f('ix_user_roles_role_id'), 'user_roles', ['role_id'], unique=False)
    op.create_index(op.f('ix_user_roles_user_id'), 'user_roles', ['user_id'], unique=False)
    op.create_table('subnets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('zone_id', sa.Integer(), nullable=False),
    sa.Column('address', postgresql.CIDR(), nullable=False),
    sa.Column('gateway', postgresql.INET(), nullable=True),
    sa.Column('dns_1', postgresql.INET(), nullable=True),
    sa.Column('dns_2', postgresql.INET(), nullable=True),
    sa.Column('vlan', sa.Integer(), nullable=True),
    sa.Column('modifier_id', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['modifier_id'], ['users.id'], name=op.f('fk_subnets_modifier_id_users')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_subnets_owner_id_users')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_subnets_project_id_projects')),
    sa.ForeignKeyConstraint(['zone_id'], ['net_zones.id'], name=op.f('fk_subnets_zone_id_net_zones')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_subnets')),
    sa.UniqueConstraint('name', name=op.f('uq_subnets_name'))
    )
    op.create_index(op.f('ix_subnets_modifier_id'), 'subnets', ['modifier_id'], unique=False)
    op.create_index(op.f('ix_subnets_owner_id'), 'subnets', ['owner_id'], unique=False)
    op.create_index(op.f('ix_subnets_project_id'), 'subnets', ['project_id'], unique=False)
    op.create_index(op.f('ix_subnets_zone_id'), 'subnets', ['zone_id'], unique=False)
    op.create_table('systems',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('hostname', sa.String(), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('model_id', sa.Integer(), nullable=False),
    sa.Column('hypervisor_id', sa.Integer(), nullable=True),
    sa.Column('state_id', sa.Integer(), nullable=False),
    sa.Column('modifier_id', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['hypervisor_id'], ['systems.id'], name=op.f('fk_systems_hypervisor_id_systems')),
    sa.ForeignKeyConstraint(['model_id'], ['system_models.id'], name=op.f('fk_systems_model_id_system_models')),
    sa.ForeignKeyConstraint(['modifier_id'], ['users.id'], name=op.f('fk_systems_modifier_id_users')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_systems_owner_id_users')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_systems_project_id_projects')),
    sa.ForeignKeyConstraint(['state_id'], ['system_states.id'], name=op.f('fk_systems_state_id_system_states')),
    sa.ForeignKeyConstraint(['type_id'], ['system_types.id'], name=op.f('fk_systems_type_id_system_types')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_systems')),
    sa.UniqueConstraint('name', name=op.f('uq_systems_name'))
    )
    op.create_index(op.f('ix_systems_hypervisor_id'), 'systems', ['hypervisor_id'], unique=False)
    op.create_index(op.f('ix_systems_model_id'), 'systems', ['model_id'], unique=False)
    op.create_index(op.f('ix_systems_modifier_id'), 'systems', ['modifier_id'], unique=False)
    op.create_index(op.f('ix_systems_owner_id'), 'systems', ['owner_id'], unique=False)
    op.create_index(op.f('ix_systems_project_id'), 'systems', ['project_id'], unique=False)
    op.create_index(op.f('ix_systems_type_id'), 'systems', ['type_id'], unique=False)
    op.create_table('ip_addresses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('subnet_id', sa.Integer(), nullable=False),
    sa.Column('address', postgresql.INET(), nullable=False),
    sa.Column('modifier_id', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['modifier_id'], ['users.id'], name=op.f('fk_ip_addresses_modifier_id_users')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_ip_addresses_owner_id_users')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_ip_addresses_project_id_projects')),
    sa.ForeignKeyConstraint(['subnet_id'], ['subnets.id'], name=op.f('fk_ip_addresses_subnet_id_subnets')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ip_addresses')),
    sa.UniqueConstraint('subnet_id', 'address', name=op.f('uq_ip_addresses_subnet_id_address'))
    )
    op.create_index(op.f('ix_ip_addresses_modifier_id'), 'ip_addresses', ['modifier_id'], unique=False)
    op.create_index(op.f('ix_ip_addresses_owner_id'), 'ip_addresses', ['owner_id'], unique=False)
    op.create_index(op.f('ix_ip_addresses_project_id'), 'ip_addresses', ['project_id'], unique=False)
    op.create_index(op.f('ix_ip_addresses_subnet_id'), 'ip_addresses', ['subnet_id'], unique=False)
    op.create_table('storage_pools',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('system_id', sa.Integer(), nullable=True),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('total_size', sa.BigInteger(), nullable=True),
    sa.Column('used_size', sa.BigInteger(), nullable=True),
    sa.Column('attributes', postgresql.JSONB(), nullable=True),
    sa.Column('modifier_id', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['modifier_id'], ['users.id'], name=op.f('fk_storage_pools_modifier_id_users')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_storage_pools_owner_id_users')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_storage_pools_project_id_projects')),
    sa.ForeignKeyConstraint(['system_id'], ['systems.id'], name=op.f('fk_storage_pools_system_id_systems')),
    sa.ForeignKeyConstraint(['type_id'], ['storage_pool_types.id'], name=op.f('fk_storage_pools_type_id_storage_pool_types')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storage_pools')),
    sa.UniqueConstraint('name', name=op.f('uq_storage_pools_name'))
    )
    op.create_index(op.f('ix_storage_pools_modifier_id'), 'storage_pools', ['modifier_id'], unique=False)
    op.create_index(op.f('ix_storage_pools_owner_id'), 'storage_pools', ['owner_id'], unique=False)
    op.create_index(op.f('ix_storage_pools_project_id'), 'storage_pools', ['project_id'], unique=False)
    op.create_index(op.f('ix_storage_pools_system_id'), 'storage_pools', ['system_id'], unique=False)
    op.create_table('system_profiles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('hypervisor_profile_id', sa.Integer(), nullable=True),
    sa.Column('system_id', sa.Integer(), nullable=False),
    sa.Column('operating_system_id', sa.Integer(), nullable=True),
    sa.Column('default', sa.Boolean(), nullable=False),
    sa.Column('cpu', sa.Integer(), nullable=True),
    sa.Column('memory', sa.BigInteger(), nullable=True),
    sa.Column('parameters', postgresql.JSONB(), nullable=True),
    sa.Column('credentials', postgresql.JSONB(), nullable=True),
    sa.ForeignKeyConstraint(['hypervisor_profile_id'], ['system_profiles.id'], name=op.f('fk_system_profiles_hypervisor_profile_id_system_profiles')),
    sa.ForeignKeyConstraint(['operating_system_id'], ['operating_systems.id'], name=op.f('fk_system_profiles_operating_system_id_operating_systems')),
    sa.ForeignKeyConstraint(['system_id'], ['systems.id'], name=op.f('fk_system_profiles_system_id_systems')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_system_profiles')),
    sa.UniqueConstraint('name', 'system_id', name=op.f('uq_system_profiles_name_system_id'))
    )
    op.create_index(op.f('ix_system_profiles_hypervisor_profile_id'), 'system_profiles', ['hypervisor_profile_id'], unique=False)
    op.create_index(op.f('ix_system_profiles_name'), 'system_profiles', ['name'], unique=False)
    op.create_index(op.f('ix_system_profiles_system_id'), 'system_profiles', ['system_id'], unique=False)
    op.create_table('logical_volumes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('system_id', sa.Integer(), nullable=True),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('pool_id', sa.Integer(), nullable=False),
    sa.Column('size', sa.BigInteger(), nullable=False),
    sa.Column('part_table', postgresql.JSONB(), nullable=True),
    sa.Column('specs', postgresql.JSONB(), nullable=True),
    sa.Column('system_attributes', postgresql.JSONB(), nullable=True),
    sa.Column('modifier_id', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['modifier_id'], ['users.id'], name=op.f('fk_logical_volumes_modifier_id_users')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_logical_volumes_owner_id_users')),
    sa.ForeignKeyConstraint(['pool_id'], ['storage_pools.id'], name=op.f('fk_logical_volumes_pool_id_storage_pools')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_logical_volumes_project_id_projects')),
    sa.ForeignKeyConstraint(['system_id'], ['systems.id'], name=op.f('fk_logical_volumes_system_id_systems')),
    sa.ForeignKeyConstraint(['type_id'], ['volume_types.id'], name=op.f('fk_logical_volumes_type_id_volume_types')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_logical_volumes')),
    sa.UniqueConstraint('name', 'pool_id', name=op.f('uq_logical_volumes_name_pool_id')),
    sa.UniqueConstraint('name', 'system_id', name=op.f('uq_logical_volumes_name_system_id'))
    )
    op.create_index(op.f('ix_logical_volumes_modifier_id'), 'logical_volumes', ['modifier_id'], unique=False)
    op.create_index(op.f('ix_logical_volumes_owner_id'), 'logical_volumes', ['owner_id'], unique=False)
    op.create_index(op.f('ix_logical_volumes_pool_id'), 'logical_volumes', ['pool_id'], unique=False)
    op.create_index(op.f('ix_logical_volumes_project_id'), 'logical_volumes', ['project_id'], unique=False)
    op.create_index(op.f('ix_logical_volumes_system_id'), 'logical_volumes', ['system_id'], unique=False)
    op.create_table('storage_volumes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('volume_id', sa.String(), nullable=False),
    sa.Column('server_id', sa.Integer(), nullable=False),
    sa.Column('system_id', sa.Integer(), nullable=True),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('pool_id', sa.Integer(), nullable=True),
    sa.Column('size', sa.BigInteger(), nullable=False),
    sa.Column('part_table', postgresql.JSONB(), nullable=True),
    sa.Column('specs', postgresql.JSONB(), nullable=True),
    sa.Column('system_attributes', postgresql.JSONB(), nullable=True),
    sa.Column('modifier_id', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.Column('modified', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['modifier_id'], ['users.id'], name=op.f('fk_storage_volumes_modifier_id_users')),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], name=op.f('fk_storage_volumes_owner_id_users')),
    sa.ForeignKeyConstraint(['pool_id'], ['storage_pools.id'], name=op.f('fk_storage_volumes_pool_id_storage_pools')),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_storage_volumes_project_id_projects')),
    sa.ForeignKeyConstraint(['server_id'], ['storage_servers.id'], name=op.f('fk_storage_volumes_server_id_storage_servers')),
    sa.ForeignKeyConstraint(['system_id'], ['systems.id'], name=op.f('fk_storage_volumes_system_id_systems')),
    sa.ForeignKeyConstraint(['type_id'], ['volume_types.id'], name=op.f('fk_storage_volumes_type_id_volume_types')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_storage_volumes')),
    sa.UniqueConstraint('volume_id', 'server_id', name=op.f('uq_storage_volumes_volume_id_server_id'))
    )
    op.create_index(op.f('ix_storage_volumes_modifier_id'), 'storage_volumes', ['modifier_id'], unique=False)
    op.create_index(op.f('ix_storage_volumes_owner_id'), 'storage_volumes', ['owner_id'], unique=False)
    op.create_index(op.f('ix_storage_volumes_pool_id'), 'storage_volumes', ['pool_id'], unique=False)
    op.create_index(op.f('ix_storage_volumes_project_id'), 'storage_volumes', ['project_id'], unique=False)
    op.create_index(op.f('ix_storage_volumes_server_id'), 'storage_volumes', ['server_id'], unique=False)
    op.create_index(op.f('ix_storage_volumes_system_id'), 'storage_volumes', ['system_id'], unique=False)
    op.create_table('system_ifaces',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('osname', sa.String(), nullable=True),
    sa.Column('ip_address_id', sa.Integer(), nullable=True),
    sa.Column('system_id', sa.Integer(), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('attributes', postgresql.JSONB(), nullable=True),
    sa.Column('mac_address', postgresql.MACADDR(), nullable=True),
    sa.Column('desc', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['ip_address_id'], ['ip_addresses.id'], name=op.f('fk_system_ifaces_ip_address_id_ip_addresses')),
    sa.ForeignKeyConstraint(['system_id'], ['systems.id'], name=op.f('fk_system_ifaces_system_id_systems')),
    sa.ForeignKeyConstraint(['type_id'], ['iface_types.id'], name=op.f('fk_system_ifaces_type_id_iface_types')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_system_ifaces')),
    sa.UniqueConstraint('name', 'system_id', name=op.f('uq_system_ifaces_name_system_id'))
    )
    op.create_index(op.f('ix_system_ifaces_system_id'), 'system_ifaces', ['system_id'], unique=False)
    op.create_table('profiles_logical_volumes',
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('volume_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['system_profiles.id'], name=op.f('fk_profiles_logical_volumes_profile_id_system_profiles')),
    sa.ForeignKeyConstraint(['volume_id'], ['logical_volumes.id'], name=op.f('fk_profiles_logical_volumes_volume_id_logical_volumes')),
    sa.PrimaryKeyConstraint('profile_id', 'volume_id', name=op.f('pk_profiles_logical_volumes')),
    sa.UniqueConstraint('profile_id', 'volume_id', name=op.f('uq_profiles_logical_volumes_profile_id_volume_id'))
    )
    op.create_table('profiles_storage_volumes',
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('volume_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['system_profiles.id'], name=op.f('fk_profiles_storage_volumes_profile_id_system_profiles')),
    sa.ForeignKeyConstraint(['volume_id'], ['storage_volumes.id'], name=op.f('fk_profiles_storage_volumes_volume_id_storage_volumes')),
    sa.PrimaryKeyConstraint('profile_id', 'volume_id', name=op.f('pk_profiles_storage_volumes')),
    sa.UniqueConstraint('profile_id', 'volume_id', name=op.f('uq_profiles_storage_volumes_profile_id_volume_id'))
    )
    op.create_table('profiles_system_ifaces',
    sa.Column('profile_id', sa.Integer(), nullable=False),
    sa.Column('iface_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['iface_id'], ['system_ifaces.id'], name=op.f('fk_profiles_system_ifaces_iface_id_system_ifaces')),
    sa.ForeignKeyConstraint(['profile_id'], ['system_profiles.id'], name=op.f('fk_profiles_system_ifaces_profile_id_system_profiles')),
    sa.PrimaryKeyConstraint('profile_id', 'iface_id', name=op.f('pk_profiles_system_ifaces')),
    sa.UniqueConstraint('profile_id', 'iface_id', name=op.f('uq_profiles_system_ifaces_profile_id_iface_id'))
    )
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('profiles_system_ifaces')
    op.drop_table('profiles_storage_volumes')
    op.drop_table('profiles_logical_volumes')
    op.drop_index(op.f('ix_system_ifaces_system_id'), table_name='system_ifaces')
    op.drop_table('system_ifaces')
    op.drop_index(op.f('ix_storage_volumes_system_id'), table_name='storage_volumes')
    op.drop_index(op.f('ix_storage_volumes_server_id'), table_name='storage_volumes')
    op.drop_index(op.f('ix_storage_volumes_project_id'), table_name='storage_volumes')
    op.drop_index(op.f('ix_storage_volumes_pool_id'), table_name='storage_volumes')
    op.drop_index(op.f('ix_storage_volumes_owner_id'), table_name='storage_volumes')
    op.drop_index(op.f('ix_storage_volumes_modifier_id'), table_name='storage_volumes')
    op.drop_table('storage_volumes')
    op.drop_index(op.f('ix_logical_volumes_system_id'), table_name='logical_volumes')
    op.drop_index(op.f('ix_logical_volumes_project_id'), table_name='logical_volumes')
    op.drop_index(op.f('ix_logical_volumes_pool_id'), table_name='logical_volumes')
    op.drop_index(op.f('ix_logical_volumes_owner_id'), table_name='logical_volumes')
    op.drop_index(op.f('ix_logical_volumes_modifier_id'), table_name='logical_volumes')
    op.drop_table('logical_volumes')
    op.drop_index(op.f('ix_system_profiles_system_id'), table_name='system_profiles')
    op.drop_index(op.f('ix_system_profiles_name'), table_name='system_profiles')
    op.drop_index(op.f('ix_system_profiles_hypervisor_profile_id'), table_name='system_profiles')
    op.drop_table('system_profiles')
    op.drop_index(op.f('ix_storage_pools_system_id'), table_name='storage_pools')
    op.drop_index(op.f('ix_storage_pools_project_id'), table_name='storage_pools')
    op.drop_index(op.f('ix_storage_pools_owner_id'), table_name='storage_pools')
    op.drop_index(op.f('ix_storage_pools_modifier_id'), table_name='storage_pools')
    op.drop_table('storage_pools')
    op.drop_index(op.f('ix_ip_addresses_subnet_id'), table_name='ip_addresses')
    op.drop_index(op.f('ix_ip_addresses_project_id'), table_name='ip_addresses')
    op.drop_index(op.f('ix_ip_addresses_owner_id'), table_name='ip_addresses')
    op.drop_index(op.f('ix_ip_addresses_modifier_id'), table_name='ip_addresses')
    op.drop_table('ip_addresses')
    op.drop_index(op.f('ix_systems_type_id'), table_name='systems')
    op.drop_index(op.f('ix_systems_project_id'), table_name='systems')
    op.drop_index(op.f('ix_systems_owner_id'), table_name='systems')
    op.drop_index(op.f('ix_systems_modifier_id'), table_name='systems')
    op.drop_index(op.f('ix_systems_model_id'), table_name='systems')
    op.drop_index(op.f('ix_systems_hypervisor_id'), table_name='systems')
    op.drop_table('systems')
    op.drop_index(op.f('ix_subnets_zone_id'), table_name='subnets')
    op.drop_index(op.f('ix_subnets_project_id'), table_name='subnets')
    op.drop_index(op.f('ix_subnets_owner_id'), table_name='subnets')
    op.drop_index(op.f('ix_subnets_modifier_id'), table_name='subnets')
    op.drop_table('subnets')
    op.drop_index(op.f('ix_user_roles_user_id'), table_name='user_roles')
    op.drop_index(op.f('ix_user_roles_role_id'), table_name='user_roles')
    op.drop_index(op.f('ix_user_roles_project_id'), table_name='user_roles')
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_user_keys_user_id'), table_name='user_keys')
    op.drop_index(op.f('ix_user_keys_key_id'), table_name='user_keys')
    op.drop_table('user_keys')
    op.drop_index(op.f('ix_system_types_arch_id'), table_name='system_types')
    op.drop_table('system_types')
    op.drop_index(op.f('ix_system_models_arch_id'), table_name='system_models')
    op.drop_table('system_models')
    op.drop_index(op.f('ix_storage_servers_project_id'), table_name='storage_servers')
    op.drop_index(op.f('ix_storage_servers_owner_id'), table_name='storage_servers')
    op.drop_index(op.f('ix_storage_servers_modifier_id'), table_name='storage_servers')
    op.drop_table('storage_servers')
    op.drop_index(op.f('ix_role_actions_role_id'), table_name='role_actions')
    op.drop_table('role_actions')
    op.drop_index(op.f('ix_net_zones_project_id'), table_name='net_zones')
    op.drop_index(op.f('ix_net_zones_owner_id'), table_name='net_zones')
    op.drop_index(op.f('ix_net_zones_modifier_id'), table_name='net_zones')
    op.drop_table('net_zones')
    op.drop_table('volume_types')
    op.drop_table('users')
    op.drop_table('system_states')
    op.drop_table('system_archs')
    op.drop_table('storage_server_types')
    op.drop_table('storage_pool_types')
    op.drop_table('roles')
    op.drop_table('projects')
    op.drop_table('operating_systems')
    op.drop_table('iface_types')
    ### end Alembic commands ###
